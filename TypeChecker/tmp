/*
 * Stubs for built-in classes of Quack. We do not generate code
 * for these.  These are used only for static semantics checking.
 * Their real code is hand-written C code.
 */

 class Obj() {
    def PRINT() { }
    def STR(): String { }
    def EQUALS(other: Obj): Boolean {} // Default is object identity
 }

 class Nothing() { }

 class String() {
    def PLUS(other: String): String { }      // +
    def EQUALS(other: Obj): Boolean { }   // ==
    def ATMOST(other: String): Boolean { }   // <=
    def LESS(other: String): Boolean { }     // <
    def ATLEAST(other: String): Boolean { }  // >=
    def MORE(other: String): Boolean { }     // >
 }

 class Boolean() { }

 class Int() {
    def PLUS(right: Int): Int {}   // this + right
    def TIMES(right: Int): Int {}  // this * right
    def MINUS(right: Int): Int {}  // this - right
    def DIVIDE(right: Int): Int {}    // this / right
    def ATMOST(other: Int): Boolean { }     // <=
    def LESS(other: Int): Boolean { }       // <
    def ATLEAST(other: Int): Boolean { }    // >=
    def MORE(other: Int): Boolean { }       // >
    def EQUALS(other: Obj): Boolean { }       // ==
 }
/**
 * A simple sample Quack program
 */

class Pt(x: Int, y: Int) extends Obj {
  this.x : Int = x;
  this.y : Int = y;

  def STR() : String {
      return "(" + this.x.STR() + "," 
                 + this.y.STR() + ")";
  }

  def PLUS(other: Pt) : Pt {
      return Pt(this.x + other.x, this.y + other.y);
  }

  def _x() : Int {
      return this.x;
  }

  def _y() : Int {
      return this.y;
  }
}

class Rect(ll: Pt, ur: Pt) extends Obj {
  this.ll: Pt = ll;
  this.ur: Pt  = ur;

  def translate(delta: Pt) : Pt {
      return Rect(ll+Pt, ur+Pt);
  }

  def STR():String {
      lr = Pt( this.ur._y(), this.ll._x() );  // lower right 
      ul = Pt( this.ll._x(), this.ur._y() );  // upper left
      return "(" + this.ll.STR() + ", "
                 +      ul.STR() + "," 
                 + this.ur.STR() + ","
                 +      lr.STR() + ")";
  }
}

class Square(ll: Pt, side: Int) extends Rect {
  this.ll = ll;
  this.ur = Pt(this.ll._x() + side, this.ll._y() + side);
}
  
a_square: Rect = Square( Pt(3,3), 5 );
a_square = a_square.translate( Pt(2,2) );
a_square.PRINT();
