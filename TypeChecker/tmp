/*
 * Stubs for built-in classes of Quack. We do not generate code
 * for these.  These are used only for static semantics checking.
 * Their real code is hand-written C code.
 */

 class Obj() {
    def PRINT() { }
    def STR() { }
    def EQUALS(other: Obj): Boolean {} // Default is object identity
 }

 class Nothing() { }

 class String() {
    def PLUS(other: String): String { }      // +
    def EQUALS(other: String): Boolean { }   // ==
    def ATMOST(other: String): Boolean { }   // <=
    def LESS(other: String): Boolean { }     // <
    def ATLEAST(other: String): Boolean { }  // >=
    def MORE(other: String): Boolean { }     // >
 }

 class Boolean() { }

 class Int() {
    def PLUS(right: Int): Int {}   // this + right
    def TIMES(right: Int): Int {}  // this * right
    def MINUS(right: Int): Int {}  // this - right
    def DIVIDE(right: Int): Int {}    // this / right
    def ATMOST(other: Int): Boolean { }     // <=
    def LESS(other: Int): Boolean { }       // <
    def ATLEAST(other: Int): Boolean { }    // >=
    def MORE(other: Int): Boolean { }       // >
 }
/*
 * A point has an x component and a y component
 */
 class Pt(x: Int, y: Int) {
     this.x = x;
     this.y = y;

     /* Note type of this.x and this.y is
      * fixed in the object --- methods cannot
      * change it.  Essentially, the flow relation is
      * from every method to every other method.
      */  

     def _get_x(): Int {
       return this.x; 
     }   

     def _get_y(): Int {
     return this.y;
     }   

     /* Mutator: Evaluate for effect */
     def translate(dx: Int, dy: Int): Nothing {
     this.x = this.x + dx; 
this.y = this.y + dy; 
     }   

     /* More functional style: Evaluate for value */
     def PLUS(other: Pt): Pt {
     return Pt(this.x + other.x, this.y + other.y); 
     }   
     
     def EQUAL(other: Obj): Boolean {
        typecase other {
            pt: Pt { return this.x == pt.x and this.y == pt.y; }
            thing: Obj { return false; }
        }
     }
}

p1 = Pt(1,2);
p3 = not p1 == p1 or p1 == p1;
Pt(13,42).PRINT(); 

